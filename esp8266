#include "DHT.h"
#include <Adafruit_Sensor.h>
#include <ESP8266WiFi.h>

#define WLAN_SSID "HomeOn"
#define WLAN_PASS "home123on"

#define HOMEON_CENTRAL_HOST "192.168.0.250"
#define HOMEON_CENTRAL_PORT 1500

#define SERVER_WELCOME_PACKET 0x0001
#define SERVER_PING_PACKET 0x00FE

#define SERVER_REQUEST_LIGHT   0x000B

#define SERVER_REQUEST_TEMP    0x000C
#define SERVER_REQUEST_LDR     0x000D
#define SERVER_REQUEST_MQ2     0x000E
#define SERVER_REQUEST_MQ6     0x000F
#define SERVER_REQUEST_USOLO   0x0010

#define SERVER_SIMPLE_ACTION_PACKET 0x00C8

#define CLIENT_WELCOME_PACKET 0x0001

#define CLIENT_SEND_TEMP    0x000C
#define CLIENT_SEND_LDR     0x000D
#define CLIENT_SEND_MQ2     0x000E
#define CLIENT_SEND_MQ6     0x000F
#define CLIENT_SEND_USOLO   0x0010

#define CLIENT_PONG_PACKET 0x00FE

#define LDR_PIN       A0//A0
#define DHT_PIN       D1//D1
#define BUZZER_PIN    D1//D1
#define MQ2_PIN       D1//D1
#define MQ6_PIN       D1//D1
#define USOLO_PIN     D1//D1

#define LIGHT_1_PIN     D1//D1
#define LIGHT_2_PIN     D2//D2
#define LIGHT_3_PIN     D3//D3

#define LIGHT_MODULE  true
#define DHT_MODULE    false
#define BUZZER_MODULE false
#define LDR_MODULE    false
#define MQ2_MODULE    false
#define MQ6_MODULE    false
#define USOLO_MODULE  false

#define DHT_TYPE DHT11
 
DHT dht(DHT_PIN, DHT_TYPE);
WiFiClient client;

uint16_t ESP_ID = 0xAAFF;

float temperaturaAtual = 0.0, umidadeAtual = 0.0;
int luminosidadeAtual = 0, mq2Atual = 0, mq6Atual = 0, umidadeSoloAtual = 0;

bool lightState = HIGH, lightState2 = HIGH, lightState3 = HIGH;

uint8_t getModuleType()
{
  if(LIGHT_MODULE)
    return (uint8_t) 0x0001;
  else if(DHT_MODULE)
    return (uint8_t) 0x0002;
  else if(BUZZER_MODULE)
    return (uint8_t) 0x0003;
  else if(LDR_MODULE)
    return (uint8_t) 0x0004;
  else if(MQ2_MODULE)
    return (uint8_t) 0x0005;
  else if(MQ6_MODULE)
    return (uint8_t) 0x0006;
  else if(USOLO_MODULE)
    return (uint8_t) 0x0007;
  else
    return (uint8_t) -0x0001;
}

void setup()
{
  WiFi.mode(WIFI_STA);
  
  if(LDR_MODULE)
    pinMode(LDR_PIN,    INPUT);
  else if(LIGHT_MODULE)
  {
    pinMode(LIGHT_1_PIN,  OUTPUT);  
    pinMode(LIGHT_2_PIN,  OUTPUT);  
    pinMode(LIGHT_3_PIN,  OUTPUT);

    digitalWrite(LIGHT_1_PIN, lightState);
    digitalWrite(LIGHT_2_PIN, lightState2);
    digitalWrite(LIGHT_3_PIN, lightState3);
  }
  else if(MQ2_MODULE)
    pinMode(MQ2_PIN,    INPUT);
  else if(MQ6_MODULE)
    pinMode(MQ6_PIN,    INPUT);
  else if(USOLO_MODULE)
    pinMode(USOLO_PIN,  INPUT);
  else if(BUZZER_MODULE)
    pinMode(BUZZER_PIN, OUTPUT);
  else if(DHT_MODULE)
    dht.begin();

  Serial.begin(9600);

  if(LDR_MODULE)
    Serial.println("Initializing HomeOn LDR Module v0.1");
  else if(LIGHT_MODULE)
    Serial.println("Initializing HomeOn Light Module v0.13");
  else if(MQ2_MODULE)
    Serial.println("Initializing HomeOn MQ2 Module v0.1");
  else if(MQ6_MODULE)
    Serial.println("Initializing HomeOn MQ6 Module v0.1");
  else if(USOLO_MODULE)
    Serial.println("Initializing HomeOn Ground Humidity Module v0.1");
  else if(BUZZER_MODULE)
    Serial.println("Initializing HomeOn Buzzer Module v0.1");
  else if(DHT_MODULE)
    Serial.println("Initializing HomeOn Temperature and Humidity Module v0.1");

  Serial.println();
  Serial.println();

  Serial.println("Initializing Network");

  Serial.print("Connecting to SSID ");
  Serial.print(WLAN_SSID);
  Serial.print(" - Please wait ");
  
  WiFi.begin(WLAN_SSID, WLAN_PASS);
  
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(800);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("HomeOn ESP8266 Module Network Connected!");
  Serial.println("Module Network Info :");
  Serial.print(" # IP - ");
  Serial.println(WiFi.localIP());
  Serial.println();
  Serial.println();
}

void loop() 
{
  if(!client.connected())
  {
    Serial.print("Connecting to HomeOn Central on ");
    Serial.print(HOMEON_CENTRAL_HOST);
    Serial.print(":");
    Serial.print(HOMEON_CENTRAL_PORT);
    while (!client.connect(HOMEON_CENTRAL_HOST, HOMEON_CENTRAL_PORT)) 
    {
      delay(800);
      Serial.print(".");
      yield();
    }
    Serial.println();
    Serial.println("Connected and ready!");
    Serial.println();
    Serial.println();

    delay(3000);
    send_welcome_packet();
  }

  delay(1000);

  while(client.connected())
  {
    byte recv_buffer[512];
    int size_buffer = 0;
    
    while(client.available())
    {
      byte response = client.read();
      recv_buffer[size_buffer] = response;
      size_buffer++;
    }

    if(size_buffer > 0)
    {
      if(LDR_MODULE)
        luminosidadeAtual = analogRead(LDR_PIN);
      if(MQ2_MODULE)
        mq2Atual = digitalRead(MQ2_PIN);
      if(MQ6_MODULE)
        mq6Atual = digitalRead(MQ6_PIN);
      if(USOLO_MODULE)
        umidadeSoloAtual = digitalRead(USOLO_PIN);
      if(DHT_MODULE)
      {
        umidadeAtual = dht.readHumidity();
        temperaturaAtual = dht.readTemperature(); 
    
        //Se não for um numero retorna erro de leitura
        if (isnan(umidadeAtual) || isnan(temperaturaAtual)) 
        {
          Serial.println("Erro ao ler o sensor DHT!");
    
          umidadeAtual = 200;
          temperaturaAtual = 200;
        }
      }
      
      byte* packet = new byte[size_buffer];
      memcpy(packet, recv_buffer, size_buffer);

      handle_packet(packet);
    }
  }

  client.stop();

  delay(5000);
}

void handle_packet(byte* packet)
{
  if((int) packet[0x0004] != SERVER_PING_PACKET && (int) packet[0x0004] != SERVER_WELCOME_PACKET)
  {
    Serial.print("Nova requisição com OpCode ");
    Serial.println((int) packet[0x0004]);
  }
  
  switch(packet[0x0004])
  {
    case SERVER_WELCOME_PACKET:
      Serial.println("Received a Welcome Back Packet from Server. Handshake complete!");
      break;
    case SERVER_PING_PACKET:
      send_pong_packet();
      break;
    case SERVER_SIMPLE_ACTION_PACKET:
      handle_simple_action_packet(packet);
      break;
    case SERVER_REQUEST_LIGHT:
      handle_request_light_switch_action_packet(packet);
      break;
    case SERVER_REQUEST_TEMP:
      handle_request_temp_action_packet();
      break;
    case SERVER_REQUEST_LDR:
      handle_request_ldr_action_packet();
      break;  
    case SERVER_REQUEST_MQ2:
      handle_request_mq2_action_packet();
      break;
    case SERVER_REQUEST_MQ6:
      handle_request_mq6_action_packet();
      break;
    case SERVER_REQUEST_USOLO:
      handle_request_usolo_action_packet();
      break;
    default:
      Serial.print("Received a unknow packet from server ");
      Serial.println(packet[0x04]);
      break;
  }
}

void make_header(uint8_t* packet)
{
  packet[0x00] = (uint8_t)((ESP_ID & 0xFF00) >> 8);
  packet[0x01] = (uint8_t)(ESP_ID & 0x00FF);
  packet[0x02] = getModuleType();
  packet[0x03] = 0x00;
}

void send_welcome_packet()
{
  Serial.println("Sending Welcome Packet to Server");
  uint8_t welcome_packet[0x0005];
  make_header(welcome_packet);
  welcome_packet[0x04] = (uint8_t) CLIENT_WELCOME_PACKET;

  client.write((const uint8_t*)welcome_packet, sizeof(welcome_packet));
  client.flush();
  Serial.println("Sent Welcome Packet!");
}

void send_pong_packet()
{
  uint8_t pong_packet[0x0005];
  make_header(pong_packet);
  pong_packet[0x04] = (uint8_t) CLIENT_PONG_PACKET;

  client.write((const uint8_t*)pong_packet, sizeof(pong_packet));
  client.flush();
}

void handle_simple_action_packet(byte* packet)
{
  Serial.print("Received a simple action packet with value ");
  Serial.println(packet[0x0005]);
}

void handle_request_light_switch_action_packet(byte* packet)
{
  if(packet[0x0005] == 1)
  {
    lightState = !lightState;
    digitalWrite(LIGHT_1_PIN, lightState);    
  }
  else if(packet[0x0005] == 2)
  {
    lightState2 = !lightState2;
    digitalWrite(LIGHT_2_PIN, lightState2);
  }
  else
  {
    lightState3 = !lightState3;
    digitalWrite(LIGHT_3_PIN, lightState3);
  }
}

void handle_request_temp_action_packet()
{
  uint8_t temp_packet[0x0007];
  make_header(temp_packet);
  temp_packet[0x04] = (uint8_t) CLIENT_SEND_TEMP;
  temp_packet[0x05] = (uint8_t) temperaturaAtual;
  temp_packet[0x06] = (uint8_t) umidadeAtual;

  Serial.print("Enviando temperatura ");
  Serial.print(temperaturaAtual);
  Serial.print(" e umidade ");
  Serial.println(umidadeAtual);
  
  client.write((const uint8_t*)temp_packet, sizeof(temp_packet));
  client.flush();
}

void handle_request_ldr_action_packet()
{
  uint8_t ldr_packet[0x0006];
  make_header(ldr_packet);
  ldr_packet[0x04] = (uint8_t) CLIENT_SEND_LDR;
  ldr_packet[0x05] = (uint8_t) luminosidadeAtual;
  
  client.write((const uint8_t*)ldr_packet, sizeof(ldr_packet));
  client.flush();
}

void handle_request_mq2_action_packet()
{
  uint8_t mq2_packet[0x0006];
  make_header(mq2_packet);
  mq2_packet[0x04] = (uint8_t) CLIENT_SEND_MQ2;
  mq2_packet[0x05] = (uint8_t) mq2Atual;
  
  client.write((const uint8_t*)mq2_packet, sizeof(mq2_packet));
  client.flush();
}

void handle_request_mq6_action_packet()
{
  uint8_t mq6_packet[0x0006];
  make_header(mq6_packet);
  mq6_packet[0x04] = (uint8_t) CLIENT_SEND_MQ6;
  mq6_packet[0x05] = (uint8_t) mq6Atual;
  
  client.write((const uint8_t*)mq6_packet, sizeof(mq6_packet));
  client.flush();
}

void handle_request_usolo_action_packet()
{
  uint8_t usolo_packet[0x0006];
  make_header(usolo_packet);
  usolo_packet[0x04] = (uint8_t) CLIENT_SEND_USOLO;
  usolo_packet[0x05] = (uint8_t) umidadeSoloAtual;
  
  client.write((const uint8_t*)usolo_packet, sizeof(usolo_packet));
  client.flush();
}
